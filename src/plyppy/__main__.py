import os
import shutil
import cv2
from importlib.resources import files
from io import BytesIO
from time import sleep
from rich.console import Console
from rich.prompt import Prompt, Confirm, InvalidResponse
from rich.progress import Progress
from rembg import remove
from PIL import Image
import subprocess

console = Console()

def banner():
    return """

   ▄███████▄  ▄█       ▄██   ▄      ▄███████▄    ▄███████▄ ▄██   ▄   
  ███    ███ ███       ███   ██▄   ███    ███   ███    ███ ███   ██▄ 
  ███    ███ ███       ███▄▄▄███   ███    ███   ███    ███ ███▄▄▄███ 
  ███    ███ ███       ▀▀▀▀▀▀███   ███    ███   ███    ███ ▀▀▀▀▀▀███ 
▀█████████▀  ███       ▄██   ███ ▀█████████▀  ▀█████████▀  ▄██   ███ 
  ███        ███       ███   ███   ███          ███        ███   ███ 
  ███        ███▌    ▄ ███   ███   ███          ███        ███   ███ 
 ▄████▀      █████▄▄██  ▀█████▀   ▄████▀       ▄████▀       ▀█████▀  
             ▀                                                       
"""

def copyright_and_license():
    return """ © 2024 Sarthak Shah (shahsarthakw@gmail.com)
 Distributed under GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html)
"""

def template_plymouth(name):
    bg_start = Prompt.ask("[blue]Enter the hex code of the top of the background: ", default="000000")
    bg_end = Prompt.ask("[blue]Enter the hex code of the bottom of the background: ", default="2a2a2a")
    return f"""[Plymouth Theme]
Name={name}
Description=Plymouth Theme Generated by pyppy
ModuleName=two-step

[two-step]
ImageDir=/usr/share/plymouth/themes/{name}
HorizontalAlignment=.5
VerticalAlignment=.5
BackgroundStartColor=0x{bg_start}
BackgroundEndColor=0x{bg_end}

[boot-up]
UseEndAnimation=false

[shutdown]
UseEndAnimation=false

[reboot]
UseEndAnimation=false
"""

def process_image(image_path, output_dir, remove_bg):
    with open(image_path, 'rb') as f:
        img_data = f.read()
        if remove_bg:
            console.log("[green]Removing background from image...[/]")
            output_img = remove(img_data)
        else:
            output_img = img_data
    
    img = Image.open(BytesIO(output_img) if remove_bg else image_path)
    output_file = os.path.join(output_dir, 'header-image.png')
    img.save(output_file)
    console.log(f"Image saved to {output_file}")

def process_gif(gif_path, output_dir, remove_bg):
    console.log("[green]Processing GIF...[/]")
    gif = Image.open(gif_path)
    
    os.makedirs(output_dir, exist_ok=True)
    
    total_frames = 0 # (we need this to track progress)
    try:
        while True:
            gif.seek(total_frames)
            total_frames += 1
    except EOFError:
        pass

    gif.seek(0)
    frame_index = 0

    with Progress() as progress:
        task = progress.add_task("[green]Processing GIF frames...", total=total_frames)
        
        while True:
            try:
                gif.seek(frame_index)
                frame = gif.copy()

                with BytesIO() as buffer:
                    frame.save(buffer, format='PNG')
                    frame_data = buffer.getvalue()

                    if remove_bg:
                        frame_data = remove(frame_data)
                        frame = Image.open(BytesIO(frame_data))

                output_frame_path = os.path.join(output_dir, f'throbber-{frame_index:04d}.png')
                frame.save(output_frame_path)

                frame_index += 1
                progress.advance(task)

            except EOFError:
                break

    console.log(f"GIF frames saved to {output_dir}")
    return total_frames

def process_video(video_path, output_dir, remove_bg):
    console.log("[green]Processing video...[/]")
    cap = cv2.VideoCapture(video_path)
    
    os.makedirs(output_dir, exist_ok=True)
    
    frame_index = 0
    with Progress() as progress:
        task = progress.add_task("[green]Processing video frames...", total=int(cap.get(cv2.CAP_PROP_FRAME_COUNT)))
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            output_frame_path = os.path.join(output_dir, f'throbber-{frame_index:04d}.png')
            if remove_bg:
                frame = remove(frame)
            cv2.imwrite(output_frame_path, frame)
            frame_index += 1
            progress.advance(task)
    
    cap.release()
    console.log(f"Video frames saved to {output_dir}")

def generate_plymouth_config(output_dir):
    name = os.path.basename(os.path.normpath(output_dir))
    plymouth_file = os.path.join(output_dir, f"{name}.plymouth")
    with open(plymouth_file, 'w') as f:
        f.write(template_plymouth(name))
    entry_img = files("plyppy.assets").joinpath("entry.png")
    lock_img = files("plyppy.assets").joinpath("lock.png")
    bullet_img = files("plyppy.assets").joinpath("bullet.png")
    shutil.copy(entry_img, output_dir)
    shutil.copy(lock_img, output_dir)
    shutil.copy(bullet_img, output_dir)
    console.log(f"Generated Plymouth Config at directory {output_dir}")

def validate_file_path(file_path):
    """Validate the input file path and convert relative paths to absolute."""
    abs_path = os.path.abspath(file_path)
    if not abs_path or '\0' in abs_path:
        raise InvalidResponse("[bold red]Error: Invalid file path. Please ensure the file path is correct and does not contain null characters.[/]")
    if not os.path.exists(abs_path):
        raise InvalidResponse(f"[bold red]Error: File '{abs_path}' does not exist.[/]")
    return abs_path

def install_plymouth_theme(output_dir):
    name = os.path.basename(os.path.normpath(output_dir))
    subprocess.run(["sudo", "cp", "-r", output_dir, f"/usr/share/plymouth/themes/{name}"])
    subprocess.run(["sudo", "plymouth-set-default-theme", "-R", name])
    try_flag = Confirm.ask("[blue]Do you want to try the theme?", default=False)
    if try_flag:
        subprocess.run(["sudo", "plymouthd"])
        subprocess.run(["sudo", "plymouth", "--show-splash"])
        sleep(5)
        subprocess.run(["sudo", "plymouth", "--quit"])

def main():
    console.print(banner(), style="dim red")
    console.print(copyright_and_license(), style="red")
    while True:
        input_file = Prompt.ask("[blue]Enter the path of the image, GIF, or video")
        try:
            input_file = validate_file_path(input_file)
            break
        except InvalidResponse as e:
            console.print(str(e))

    remove_bg = Confirm.ask("[blue]Do you want to remove the background?", default=True)

    while True:
        output_dir = Prompt.ask("[blue]Enter the output directory for saving frames (also the name of the theme)")
        output_dir = os.path.abspath(output_dir)
        os.makedirs(output_dir, exist_ok=True)
        break

    ext = os.path.splitext(input_file)[1].lower()

    if ext in ['.jpg', '.jpeg', '.png']:
        process_image(input_file, output_dir, remove_bg)
        generate_plymouth_config(output_dir)

    elif ext == '.gif':
        process_gif(input_file, output_dir, remove_bg)
        generate_plymouth_config(output_dir)

    elif ext in ['.mp4', '.avi', '.mov']:
        process_video(input_file, output_dir, remove_bg)
        generate_plymouth_config(output_dir)

    install_flag = Confirm.ask("[blue]Do you want to install the theme?", default=False)
    if install_flag:
        install_plymouth_theme(output_dir)

    console.log(f"Enjoy your custom theme!")
    

if __name__ == "__main__":
    main()
